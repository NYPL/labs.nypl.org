{
  "name": "hookshot",
  "author": {
    "name": "Marco Aurelio",
    "email": "thecoreh@gmail.com"
  },
  "version": "0.0.2",
  "dependencies": {
    "express": "~3.2.0",
    "commander": "~1.1.1"
  },
  "main": "lib",
  "bin": {
    "hookshot": "./bin/hookshot"
  },
  "readme": "# hookshot\n\n![](http://i.cloudup.com/i_vGKjtQcY2.png)\n\n\"You found the *hookshot*! It's a spring-loaded chain that you can cast out to hook things.\"\n\n## Intro\n\n**hookshot** is a tiny library and companion CLI tool for handling [GitHub post-receive hooks](https://help.github.com/articles/post-receive-hooks).\n\n## Examples\n\n### Library\n\n```javascript\nvar hookshot = require('hookshot');\nhookshot('refs/heads/master', 'git pull && make').listen(3000)\n```\n\n### CLI Tool\n\n```bash\nhookshot -r refs/heads/master 'git pull && make'\n```\n\n## Usage\n\nThe library exposes a single function, `hookshot()`. When called, this functions returns an express instance configured to handle post-receive hooks from GitHub. You can react to pushes to specific branches by listening to specific events on the returned instance, or by providing optional arguments to the `hookshot()` function.\n\n```javascript\nhookshot()\n.on('refs/heads/master', 'git pull && make')\n.listen(3000)\n```\n\n```javascript\nhookshot('refs/heads/master', 'git pull && make').listen(3000)\n```\n\n### Actions\n\nActions can either be shell commands or JavaScript functions.\n\n```javascript\nhookshot('refs/heads/master', 'git pull && make').listen(3000)\n```\n\n```javascript\nhookshot('refs/heads/master', function(info) {\n  // do something with push info ...\n}).listen(3000)\n```\n\n### Mounting to existing express servers\n\n**hookshot** can be mounted to a custom route on your existing express server:\n\n```javascript\n// ...\napp.use('/my-github-hook', hookshot('refs/heads/master', 'git pull && make'));\n// ...\n```\n\n### Special Events\n\nSpecial events are fired when branches/tags are created, deleted:\n\n```javascript\nhookshot()\n.on('create', function(info) {\n  console.log('ref ' + info.ref + ' was created.')\n})\n.on('delete', function(info) {\n  console.log('ref ' + info.ref + ' was deleted.')\n})\n```\n\nThe `push` event is fired when a push is made to any ref:\n\n```javascript\nhookshot()\n.on('push', function(info) {\n  console.log('ref ' + info.ref + ' was pushed.')\n})\n```\n\nFinally, the `hook` event is fired for every post-receive hook that is send by GitHub.\n\n```javascript\nhookshot()\n.on('push', function(info) {\n  console.log('ref ' + info.ref + ' was pushed.')\n})\n```\n\n### CLI Tool\n\nA companion CLI tool is provided for convenience. To use it, install **hookshot** via npm using the `-g` flag:\n\n```bash\nnpm install -g hookshot\n```\n\nThe CLI tool takes as argument a command to execute upon GitHub post-receive hook:\n\n```bash\nhookshot 'echo \"PUSHED!\"'\n```\n\nYou can optionally specify an HTTP port via the `-p` flag (defaults to 3000) and a ref via the `-r` flag (defaults to all refs):\n\n```bash\nhookshot -r refs/heads/master -p 9001 'echo \"pushed to master!\"'\n```\n",
  "readmeFilename": "README.md",
  "_id": "hookshot@0.0.2",
  "description": "![](http://i.cloudup.com/i_vGKjtQcY2.png)",
  "dist": {
    "shasum": "1a5d5e0a7e7096496464489d637571dd53fe5681"
  },
  "_from": "hookshot@",
  "_resolved": "https://registry.npmjs.org/hookshot/-/hookshot-0.0.2.tgz"
}
